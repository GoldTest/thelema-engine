/*
 * Copyright 2020-2021 Anton Trushkov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package app.thelema.img

import app.thelema.data.IByteData
import app.thelema.fs.IFile
import app.thelema.gl.*
import app.thelema.utils.LOG

/** 2D texture object
 *
 * @author zeganstyl */
class Texture2D(textureHandle: Int = GL.glGenTexture()) : ITexture2D, Texture(GL_TEXTURE_2D, textureHandle) {
    override var width: Int = 0
    override var height: Int = 0
    override val depth: Int
        get() = 0

    /** Image from which texture was loaded, may be null, if texture was generated by frame buffer */
    override var image: IImageData? = null

    override var pixelFormat: Int = GL_RGBA

    override var internalFormat: Int = GL_RGBA

    override var pixelChannelType: Int = GL_UNSIGNED_BYTE

    override fun load(
        uri: String,
        minFilter: Int,
        magFilter: Int,
        sWrap: Int,
        tWrap: Int,
        anisotropicFilter: Float,
        generateMipmaps: Boolean?,
        error: (status: Int) -> Unit,
        ready: ITexture2D.() -> Unit
    ): ITexture2D {
        initTexture()
        IMG.load(
            uri = uri,
            ready = { img ->
                this.image = img
                name = img.name

                initParameters(img.width, img.height, minFilter, magFilter, sWrap, tWrap, anisotropicFilter)
                GL.glTexImage2D(glTarget, 0, img.glInternalFormat, width, height, 0, img.glPixelFormat, img.glType, img)
                if (generateMipmaps ?: checkMipmap(minFilter)) generateMipmapsGPU()
                GL.glBindTexture(glTarget, 0)

                ready(this)
            },
            error = { error(it) }
        )

        return this
    }

    override fun load(
        file: IFile,
        generateMipmaps: Boolean?,
        error: (status: Int) -> Unit,
        ready: ITexture2D.() -> Unit
    ): ITexture2D {
        initTexture()
        IMG.load(
            file = file,
            ready = { img ->
                this.image = img
                name = img.name

                initParameters(img.width, img.height, minFilter, magFilter, sWrap, tWrap, anisotropicFilter)
                GL.glTexImage2D(glTarget, 0, img.glInternalFormat, width, height, 0, img.glPixelFormat, img.glType, img)
                if (generateMipmaps ?: checkMipmap(minFilter)) generateMipmapsGPU()
                GL.glBindTexture(glTarget, 0)
                ready()
            },
            error = error
        )
        return this
    }

    override fun load(
        image: IImageData,
        generateMipmaps: Boolean?,
        error: (status: Int) -> Unit,
        ready: ITexture2D.() -> Unit
    ): ITexture2D {
        this.image = image
        name = image.name

        this.width = image.width
        this.height = image.height

        initTexture()

        GL.glTexImage2D(glTarget, 0, image.glInternalFormat, width, height, 0, image.glPixelFormat, image.glType, image)
        if (generateMipmaps ?: checkMipmap(minFilter)) generateMipmapsGPU()
        GL.glBindTexture(glTarget, 0)

        ready()

        return this
    }

    override fun load(
        width: Int,
        height: Int,
        pixels: IByteData?,
        mipmapLevel: Int,
        internalFormat: Int,
        pixelFormat: Int,
        type: Int,
        minFilter: Int,
        magFilter: Int,
        sWrap: Int,
        tWrap: Int,
        anisotropicFilter: Float,
        generateMipmaps: Boolean?
    ): ITexture2D {
        initParameters(width, height, minFilter, magFilter, sWrap, tWrap, anisotropicFilter)
        GL.glTexImage2D(glTarget, mipmapLevel, internalFormat, width, height, 0, pixelFormat, type, pixels)
        if (generateMipmaps ?: checkMipmap(minFilter)) generateMipmapsGPU()
        GL.glBindTexture(glTarget, 0)

        return this
    }

    private fun checkMipmap(minFilter: Int): Boolean = when (minFilter) {
        GL_LINEAR_MIPMAP_LINEAR,
        GL_LINEAR_MIPMAP_NEAREST,
        GL_NEAREST_MIPMAP_LINEAR,
        GL_NEAREST_MIPMAP_NEAREST -> true
        else -> false
    }

    private fun initParameters(
        width: Int,
        height: Int,
        minFilter: Int,
        magFilter: Int,
        sWrap: Int,
        tWrap: Int,
        anisotropicFilter: Float
    ) {
        this.width = width
        this.height = height

        if (textureHandle == 0) {
            textureHandle = GL.glGenTexture()
        }

        bind()
        this.minFilter = minFilter
        this.magFilter = magFilter
        this.sWrap = sWrap
        this.tWrap = tWrap
        GL.glTexParameteri(glTarget, GL_TEXTURE_MIN_FILTER, minFilter)
        GL.glTexParameteri(glTarget, GL_TEXTURE_MAG_FILTER, magFilter)
        GL.glTexParameteri(glTarget, GL_TEXTURE_WRAP_S, sWrap)
        GL.glTexParameteri(glTarget, GL_TEXTURE_WRAP_T, tWrap)
        this.anisotropicFilter = anisotropicFilter
    }
}
